basePath: /
definitions:
  controller.ChangePasswordInput:
    properties:
      code:
        type: string
      password:
        type: string
    type: object
  controller.EmailInput:
    properties:
      email:
        type: string
    type: object
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.InputGrade:
    properties:
      interType:
        type: string
      targetID:
        type: integer
    type: object
  controller.InputRefresh:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  controller.LocationInput:
    properties:
      lat:
        type: number
      lon:
        type: number
    type: object
  controller.LoginInput:
    properties:
      password:
        type: string
      username:
        maxLength: 50
        type: string
    required:
    - password
    - username
    type: object
  controller.MessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.RegisterInput:
    properties:
      age:
        maximum: 99
        minimum: 18
        type: integer
      city:
        maxLength: 50
        type: string
      country:
        maxLength: 50
        type: string
      email:
        maxLength: 100
        type: string
      firstname:
        maxLength: 50
        type: string
      hobbies:
        maxLength: 100
        type: string
      lastname:
        maxLength: 50
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      sex:
        enum:
        - male
        - female
        type: string
      username:
        maxLength: 50
        type: string
    required:
    - age
    - city
    - country
    - email
    - firstname
    - lastname
    - password
    - sex
    - username
    type: object
  models.User:
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  utils.MessageResponse:
    properties:
      message:
        type: string
    type: object
  utils.ModelResponse:
    properties:
      Model fields:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger REST API
  version: "1.0"
paths:
  /admin/chats:
    get:
      description: Route which return all chats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get absolutely all chats
      tags:
      - admin
  /admin/user:
    post:
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - admin
  /admin/user/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user by ID
      tags:
      - admin
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - admin
    put:
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user by ID
      tags:
      - admin
  /admin/users:
    get:
      description: Get a list of users with pagination
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a list of users
      tags:
      - admin
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change user password using verification code
      parameters:
      - description: Change Password Input
        in: body
        name: changePasswordInput
        required: true
        schema:
          $ref: '#/definitions/controller.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Change Password
      tags:
      - auth
  /auth/drop-password:
    post:
      consumes:
      - application/json
      description: Request password reset via email
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/controller.EmailInput'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Request Password Reset
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user by providing a username and password.
      parameters:
      - description: Login Input
        in: body
        name: loginInput
        required: true
        schema:
          $ref: '#/definitions/controller.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: InputRefresh
        in: body
        name: InputRefresh
        required: true
        schema:
          $ref: '#/definitions/controller.InputRefresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Refreshing access Token
      tags:
      - auth
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Register a new user by providing a username and password.
      parameters:
      - description: Register Input
        in: body
        name: RegisterInput
        required: true
        schema:
          $ref: '#/definitions/controller.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /chats:
    get:
      description: Route which return all chats for current user
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all chats for current user
      tags:
      - chat
  /chats/{username}:
    get:
      description: Get a chat between the current user and the target user
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Target Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a chat between two users
      tags:
      - chat
  /u/get-profiles:
    get:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get profile
      tags:
      - user
  /u/grade:
    post:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Input for Grade other profile
        in: body
        name: InputGrade
        required: true
        schema:
          $ref: '#/definitions/controller.InputGrade'
      produces:
      - application/json
      responses: {}
      summary: to Grade profiles
      tags:
      - user
  /u/liked-by-users:
    get:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Url for getting users which liked me
      tags:
      - user
  /u/profile:
    get:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ModelResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User profile
      tags:
      - user
    put:
      consumes:
      - multipart/form-data
      description: Edit user profile details including uploading a profile photo
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: First Name
        in: formData
        name: firstname
        type: string
      - description: Last Name
        in: formData
        name: lastname
        type: string
      - description: Age
        in: formData
        name: age
        type: integer
      - description: Country
        in: formData
        name: country
        type: string
      - description: City
        in: formData
        name: city
        type: string
      - description: Bio
        in: formData
        name: bio
        type: string
      - description: Hobbies
        in: formData
        name: hobbies
        type: string
      - description: Profile Photo
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Edit user profile
      tags:
      - user
  /u/profile/{username}:
    get:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Username
        in: path
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ModelResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User profile
      tags:
      - user
  /u/save-location:
    patch:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'Location with lat, lon '
        in: body
        name: LocationInput
        required: true
        schema:
          $ref: '#/definitions/controller.LocationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Save location
      tags:
      - user
  /u/set-as-preview/{photo_id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Id for photo which you want to set as privew
        in: path
        name: photo_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set as preview
      tags:
      - user
  /u/set-coordinates:
    patch:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Save location
      tags:
      - user
securityDefinitions:
  JWT:
    type: basic
swagger: "2.0"
