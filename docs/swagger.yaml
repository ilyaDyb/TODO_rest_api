basePath: /
definitions:
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.LocationInput:
    properties:
      lat:
        type: number
      lon:
        type: number
    type: object
  controller.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controller.MessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.RegisterInput:
    properties:
      age:
        maximum: 99
        minimum: 18
        type: integer
      country:
        type: string
      email:
        type: string
      firstname:
        type: string
      hobbies:
        type: string
      lastname:
        type: string
      password:
        type: string
      sex:
        type: string
      username:
        type: string
    required:
    - age
    - country
    - email
    - firstname
    - lastname
    - password
    - sex
    - username
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  utils.MessageResponse:
    properties:
      message:
        type: string
    type: object
  utils.ModelResponse:
    properties:
      Model fields:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger REST API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user by providing a username and password.
      parameters:
      - description: Login Input
        in: body
        name: loginInput
        required: true
        schema:
          $ref: '#/definitions/controller.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Register a new user by providing a username and password.
      parameters:
      - description: Register Input
        in: body
        name: RegisterInput
        required: true
        schema:
          $ref: '#/definitions/controller.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /u/profile:
    get:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ModelResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User profile
    put:
      consumes:
      - multipart/form-data
      description: Edit user profile details including uploading a profile photo
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: First Name
        in: formData
        name: firstname
        type: string
      - description: Last Name
        in: formData
        name: lastname
        type: string
      - description: Age
        in: formData
        name: age
        type: integer
      - description: Country
        in: formData
        name: country
        type: string
      - description: Bio
        in: formData
        name: bio
        type: string
      - description: Hobbies
        in: formData
        name: hobbies
        type: string
      - description: Profile Photo
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Edit user profile
  /u/profile/{username}:
    get:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Username
        in: path
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ModelResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User profile
  /u/save-location:
    post:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'Location with lat, lon '
        in: body
        name: LocationInput
        required: true
        schema:
          $ref: '#/definitions/controller.LocationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Save location
  /u/set-as-preview/{photo_id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: With the Bearer started
        in: header
        name: Authorization
        required: true
        type: string
      - description: Id for photo which you want to set as privew
        in: path
        name: photo_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set as preview
securityDefinitions:
  JWT:
    type: basic
swagger: "2.0"
